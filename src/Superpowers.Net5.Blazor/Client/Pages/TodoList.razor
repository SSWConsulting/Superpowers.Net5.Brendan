@page "/todo"
@using Superpowers.Net5.Models.Todo
@using Superpowers.Net5.Models.Commands
@using Superpowers.Net5.Models.Queries
@inject HttpClient Http

<style type="text/css">
    .text-decoration-line-through {
        text-decoration: line-through
    }
</style>

<h1>Todo Lists</h1>


<div class="row">
    <div class="col-4">
        <h4>Lists</h4>

        @if (todoLists != null)
        {
            <ul class="list-group mb-2">
                @foreach (var todoList in todoLists)
                {
                    <li @onclick="@(e => SelectList(todoList))" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                        @todoList.Title
                        <span><a href="#" @onclick:preventDefault @onclick:stopPropagation @onclick="@(e => DeleteList(todoList.Id))">Delete</a></span>
                    </li>
                }
            </ul>
        }

        <div class="input-group mb-3">
            <input type="text" class="form-control" @bind="newListTitle" @bind:event="oninput" placeholder="Add New List">
            <div class="input-group-append">
                <button class="btn btn-primary" type="button" disabled="@(string.IsNullOrWhiteSpace(newListTitle))" @onclick="CreateList">+ Add</button>
            </div>
        </div>

    </div>
    <div class="col-8">
        @if (selectedTodoList != null)
        {
            <h4>@selectedTodoList.Title</h4>
            <ul class="list-group mb-2">
                @foreach (var todoItem in selectedTodoList.Items)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span class="@(todoItem.Done ? "text-decoration-line-through":"")">@todoItem.Title</span>
                        <span class="">
                            <a href="#" @onclick:preventDefault @onclick:stopPropagation @onclick="@(c => ItemDone(todoItem.Id, !todoItem.Done))">Done</a> |
                            <a href="#" @onclick:preventDefault @onclick:stopPropagation @onclick="@(e => DeleteListItem(todoItem.Id))">Delete</a>
                        </span>
                    </li>
                }
            </ul>

            <div class="input-group mb-3 col-8">
                <input type="text" class="form-control" placeholder="Add List Item" @bind="newItemTitle" @bind:event="oninput">
                <div class="input-group-append">
                    <button class="btn btn-primary" type="button" disabled="@(string.IsNullOrWhiteSpace(newItemTitle))" @onclick="CreateListItem">+ Add</button>
                </div>
            </div>
        } 
        else
        {
            <h4>Loading...</h4>
        }
    </div>
</div>


@code {
    private TodoListDto[] todoLists;
    private TodoListDto selectedTodoList;

    private string newListTitle;
    private string newItemTitle;


    protected override async Task OnInitializedAsync()
    {
        await LoadLists();
    }


    private async Task LoadLists()
    {
        todoLists = await Http.GetFromJsonAsync<TodoListDto[]>("/api/todolist");

        if (selectedTodoList == null || !todoLists.Select(t => t.Id).Contains(selectedTodoList.Id))
        {
            selectedTodoList = todoLists.FirstOrDefault();
        }
        else
        {
            selectedTodoList = todoLists.FirstOrDefault(l => l.Id == selectedTodoList.Id);
        }
    }

    private void SelectList(TodoListDto list)
    {
        selectedTodoList = list;
    }

    private async Task CreateList()
    {
        var postResponse = await Http.PostAsJsonAsync<CreateTodoList>(
            "/api/todolist/create",
            new CreateTodoList { Title = newListTitle }
        );

        if (postResponse.IsSuccessStatusCode)
        {
            await LoadLists();
            // StateHasChanged();
        }
    }

    private async Task CreateListItem()
    {
        var postResponse = await Http.PostAsJsonAsync<CreateTodoListItem>(
            "/api/todolist/createitem",
            new CreateTodoListItem { ListId = selectedTodoList.Id, Title = newItemTitle }
        );

        if (postResponse.IsSuccessStatusCode)
        {
            await LoadLists();
            // StateHasChanged();
        }
    }


    private async Task DeleteList(int id)
    {
        var delResponse = await Http.DeleteAsync($"/api/todolist/{id}");
        if (delResponse.IsSuccessStatusCode)
        {
            await LoadLists();
        }
    }

    private async Task DeleteListItem(int id)
    {
        var delResponse = await Http.DeleteAsync($"/api/todolist/item/{id}");
        if (delResponse.IsSuccessStatusCode)
        {
            await LoadLists();
        }
    }


    private async Task ItemDone(int itemId, bool done)
    {
        var response = await Http.PutAsJsonAsync<ItemDone>("/api/todolist/itemdone", new ItemDone()
        {
            Id = itemId,
            IsDone = done
        });

        if (response.IsSuccessStatusCode)
        {
            await (LoadLists());
        }
    }

}
